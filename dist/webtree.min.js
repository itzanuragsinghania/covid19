(function(){var kBorderWidth=1;var kPadding=4;var kAspectRatio=1.2;var focused=null;function focus(tree){focused=tree;var level=0;var root=tree;while(root.parent){root=root.parent;level+=1;for(var i=0,sibling;sibling=root.children[i];++i){if(sibling.dom)sibling.dom.style.zIndex=0}}var width=root.dom.offsetWidth;var height=root.dom.offsetHeight;for(var t=tree;t.parent;t=t.parent){position(t.dom,-kBorderWidth,-kBorderWidth,width,height);t.dom.style.zIndex=1}layout(tree,level,width,height)}function makeDom(tree,level){var dom=document.createElement("div");dom.style.zIndex=1;dom.style.backgroundColor=tree.className?tree.className:"";dom.className="webtreemap-node webtreemap-level"+Math.min(level,4);if(tree.data["$symbol"]){dom.className+=" webtreemap-symbol-"+tree.data["$symbol"].replace(" ","_")}if(tree.data["$dominant_symbol"]){dom.className+=" webtreemap-symbol-"+tree.data["$dominant_symbol"].replace(" ","_");dom.className+=" webtreemap-aggregate"}dom.onmousedown=function(e){if(e.button==0){if(focused&&tree==focused&&focused.parent){focus(focused.parent)}else{focus(tree)}}e.stopPropagation();return true};var caption=document.createElement("div");caption.className="webtreemap-caption";caption.innerHTML=tree.name;dom.appendChild(caption);dom.title=tree.name;tree.dom=dom;return dom}function position(dom,x,y,width,height){width-=kBorderWidth*2;height-=kBorderWidth*2;dom.style.left=x+"px";dom.style.top=y+"px";dom.style.width=Math.max(width,0)+"px";dom.style.height=Math.max(height,0)+"px"}function selectSpan(nodes,space,start){var node=nodes[start];var rmin=node.data["$area"];var rmax=rmin;var rsum=0;var last_score=0;for(var end=start;node=nodes[end];++end){var size=node.data["$area"];if(size<rmin)rmin=size;if(size>rmax)rmax=size;rsum+=size;var score=Math.max(space*space*rmax/(rsum*rsum),kAspectRatio*rsum*rsum/(space*space*rmin));if(last_score&&score>last_score){rsum-=size;break}last_score=score}return[end,rsum]}function layout(tree,level,width,height){if(!("children"in tree))return;var total=tree.data["$area"];var x1=0,y1=0,x2=width-1,y2=height-2;x1+=kPadding;y1+=kPadding;x2-=kPadding;y2-=kPadding;y1+=14;var pixels_to_units=Math.sqrt(total/((x2-x1)*(y2-y1)));if(!tree.children.sorted){tree.children.sort(function(a,b){return b.data["$area"]-a.data["$area"]});tree.children.sorted=true}for(var start=0,child;child=tree.children[start];++start){if(x2-x1<60||y2-y1<40){if(child.dom){child.dom.style.zIndex=0;position(child.dom,-2,-2,0,0)}continue}var ysplit=(y2-y1)/(x2-x1)>kAspectRatio;var space;if(ysplit)space=(y2-y1)*pixels_to_units;else space=(x2-x1)*pixels_to_units;var span=selectSpan(tree.children,space,start);var end=span[0],rsum=span[1];var x=x1,y=y1;for(var i=start;i<end;++i){child=tree.children[i];if(!child.dom){child.parent=tree;child.dom=makeDom(child,level+1);tree.dom.appendChild(child.dom)}else{child.dom.style.zIndex=1}var size=child.data["$area"];var frac=size/rsum;if(ysplit){width=rsum/space;height=size/width}else{height=rsum/space;width=size/height}width/=pixels_to_units;height/=pixels_to_units;width=Math.round(width);height=Math.round(height);position(child.dom,x,y,width,height);if("children"in child){layout(child,level+1,width,height)}if(ysplit)y+=height;else x+=width}if(ysplit)x1+=Math.round(rsum/space/pixels_to_units);else y1+=Math.round(rsum/space/pixels_to_units);start=end-1}}function appendTreemap(dom,data){var style=getComputedStyle(dom,null);var width=parseInt(style.width);var height=parseInt(style.height);if(!data.dom)makeDom(data,0);dom.appendChild(data.dom);position(data.dom,0,0,width,height);layout(data,0,width,height)}window.appendTreemap=appendTreemap;let _cards=document.getElementsByClassName("card");window.addEventListener("covid-event",function(evt){const districtData=evt.detail.districtWise;if(districtData)districtData.name="Covid 19 Cases in India";const stateData=evt.detail.stateWise;let _cards=document.getElementsByClassName("card");updateCards(_cards,stateData);appendTreemap(map,districtData);window.addEventListener("resize",function(){appendTreemap(map,districtData)})},false);function updateCards(cards,stateData){updateText(cards[0],stateData.confirmed);updateText(cards[1],stateData.active);updateText(cards[2],stateData.recovered);updateText(cards[3],stateData.deaths)}function updateText(card,count){let formatNumber=count.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",");card.getElementsByClassName("card-number")[0].textContent=formatNumber}})(window);